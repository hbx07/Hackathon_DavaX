<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/UI/Dashboard/dashboard.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/UI/Dashboard/dashboard.js" />
              <option name="originalContent" value="// dashboard.js&#10;// Loads bills, handles font size and contrast&#10;&#10;// Bill data (static for now, can be loaded from server or CSV)&#10;const bills = [&#10;  { provider: 'Electrica', amount: '150 RON', due: '10 mai', status: 'warning' },&#10;  { provider: 'Digi', amount: '65 RON', due: '20 mai', status: 'close' },&#10;  { provider: 'E.ON', amount: '—', due: '—', status: 'success' }&#10;];&#10;&#10;function getStatusIcon(status) {&#10;  switch (status) {&#10;    case 'success':&#10;      return '&lt;img src=&quot;../Images/success.svg&quot; alt=&quot;Success&quot; class=&quot;bill-status&quot; height=&quot;24&quot; width=&quot;24&quot;&gt;';&#10;    case 'warning':&#10;      return '&lt;img src=&quot;../Images/warning.svg&quot; alt=&quot;Warning&quot; class=&quot;bill-status&quot; height=&quot;24&quot; width=&quot;24&quot;&gt;';&#10;    case 'close':&#10;      return '&lt;img src=&quot;../Images/close.svg&quot; alt=&quot;Close&quot; class=&quot;bill-status&quot; height=&quot;24&quot; width=&quot;24&quot;&gt;';&#10;    default:&#10;      return '';&#10;  }&#10;}&#10;&#10;function renderBills() {&#10;  const row = document.getElementById('billsRow');&#10;  row.innerHTML = '';&#10;  bills.forEach(bill =&gt; {&#10;    const el = document.createElement('article');&#10;    el.className = 'bill';&#10;    el.setAttribute('role', 'listitem');&#10;    el.setAttribute('aria-label', bill.provider);&#10;    el.innerHTML = `&#10;      &lt;div style=&quot;display:flex;align-items:center;gap:10px;&quot;&gt;&#10;        ${getStatusIcon(bill.status)}&#10;        &lt;h2&gt;${bill.provider}&lt;/h2&gt;&#10;      &lt;/div&gt;&#10;      &lt;div class=&quot;meta&quot;&gt;&#10;        &lt;div&gt;Sumă: &lt;b&gt;${bill.amount}&lt;/b&gt;&lt;/div&gt;&#10;        &lt;div&gt;Scadență: &lt;b&gt;${bill.due}&lt;/b&gt;&lt;/div&gt;&#10;      &lt;/div&gt;&#10;      &lt;div class=&quot;actions&quot;&gt;&#10;        &lt;button class=&quot;btn primary&quot; aria-label=&quot;Plătește factura ${bill.provider}&quot;&gt;Plătește&lt;/button&gt;&#10;        &lt;button class=&quot;btn&quot; aria-label=&quot;Șterge ${bill.provider}&quot;&gt;Șterge&lt;/button&gt;&#10;      &lt;/div&gt;&#10;    `;&#10;    row.appendChild(el);&#10;  });&#10;}&#10;&#10;document.addEventListener('DOMContentLoaded', function () {&#10;  renderBills();&#10;&#10;  // Font size controls&#10;  const html = document.documentElement;&#10;  const dec = document.getElementById('dec');&#10;  const inc = document.getElementById('inc');&#10;  let scale = 1.125; // rem base&#10;  function apply(){ html.style.fontSize = (16*scale)+'px'; }&#10;  dec.addEventListener('click', ()=&gt;{ scale = Math.max(1.0, +(scale - 0.1).toFixed(2)); apply(); });&#10;  inc.addEventListener('click', ()=&gt;{ scale = Math.min(1.8, +(scale + 0.1).toFixed(2)); apply(); });&#10;&#10;  // Dyslexic font toggle&#10;  const dysBtn = document.getElementById('dyslexic');&#10;  if (dysBtn) {&#10;    dysBtn.addEventListener('click', () =&gt; {&#10;      document.body.classList.toggle('dyslexic');&#10;      const enabled = document.body.classList.contains('dyslexic');&#10;      dysBtn.setAttribute('aria-pressed', enabled ? 'true' : 'false');&#10;    });&#10;  }&#10;&#10;  // High contrast toggle&#10;  const contrastBtn = document.getElementById('contrast');&#10;  contrastBtn.addEventListener('click', ()=&gt;{&#10;    const on = document.documentElement.classList.toggle('hc');&#10;    contrastBtn.setAttribute('aria-pressed', on ? 'true' : 'false');&#10;  });&#10;});&#10;" />
              <option name="updatedContent" value="// dashboard.js&#10;// Loads bills, handles font size and contrast&#10;&#10;// Bill data (static for now, can be loaded from server or CSV)&#10;const bills = [&#10;  { provider: 'Electrica', amount: '150 RON', due: '10 mai', status: 'warning' },&#10;  { provider: 'Digi', amount: '65 RON', due: '20 mai', status: 'close' },&#10;  { provider: 'E.ON', amount: '—', due: '—', status: 'success' }&#10;];&#10;&#10;function getStatusIcon(status) {&#10;  switch (status) {&#10;    case 'success':&#10;      return '&lt;img src=&quot;../Images/success.svg&quot; alt=&quot;Success&quot; class=&quot;bill-status&quot; height=&quot;24&quot; width=&quot;24&quot;&gt;';&#10;    case 'warning':&#10;      return '&lt;img src=&quot;../Images/warning.svg&quot; alt=&quot;Warning&quot; class=&quot;bill-status&quot; height=&quot;24&quot; width=&quot;24&quot;&gt;';&#10;    case 'close':&#10;      return '&lt;img src=&quot;../Images/close.svg&quot; alt=&quot;Close&quot; class=&quot;bill-status&quot; height=&quot;24&quot; width=&quot;24&quot;&gt;';&#10;    default:&#10;      return '';&#10;  }&#10;}&#10;&#10;function renderBills(filterStatus = null) {&#10;  const row = document.getElementById('billsRow');&#10;  row.innerHTML = '';&#10;  bills.filter(bill =&gt; !filterStatus || bill.status === filterStatus)&#10;    .forEach(bill =&gt; {&#10;      const el = document.createElement('article');&#10;      el.className = 'bill';&#10;      el.setAttribute('role', 'listitem');&#10;      el.setAttribute('aria-label', bill.provider);&#10;      el.innerHTML = `&#10;        &lt;div style=&quot;display:flex;align-items:center;gap:10px;&quot;&gt;&#10;          ${getStatusIcon(bill.status)}&#10;          &lt;h2&gt;${bill.provider}&lt;/h2&gt;&#10;        &lt;/div&gt;&#10;        &lt;div class=&quot;meta&quot;&gt;&#10;          &lt;div&gt;Sumă: &lt;b&gt;${bill.amount}&lt;/b&gt;&lt;/div&gt;&#10;          &lt;div&gt;Scadență: &lt;b&gt;${bill.due}&lt;/b&gt;&lt;/div&gt;&#10;        &lt;/div&gt;&#10;        &lt;div class=&quot;actions&quot;&gt;&#10;          &lt;button class=&quot;btn primary&quot; aria-label=&quot;Plătește factura ${bill.provider}&quot;&gt;Plătește&lt;/button&gt;&#10;          &lt;button class=&quot;btn&quot; aria-label=&quot;Șterge ${bill.provider}&quot;&gt;Șterge&lt;/button&gt;&#10;        &lt;/div&gt;&#10;      `;&#10;      row.appendChild(el);&#10;    });&#10;}&#10;&#10;document.addEventListener('DOMContentLoaded', function () {&#10;  renderBills();&#10;&#10;  // Status filter logic&#10;  document.querySelectorAll('.status-filter').forEach(btn =&gt; {&#10;    btn.addEventListener('click', function() {&#10;      // Remove active from all&#10;      document.querySelectorAll('.status-filter').forEach(b =&gt; b.classList.remove('active'));&#10;      // Add active to clicked&#10;      btn.classList.add('active');&#10;      // Filter bills&#10;      renderBills(btn.getAttribute('data-status'));&#10;    });&#10;  });&#10;&#10;  // Font size controls&#10;  const html = document.documentElement;&#10;  const dec = document.getElementById('dec');&#10;  const inc = document.getElementById('inc');&#10;  let scale = 1.125; // rem base&#10;  function apply(){ html.style.fontSize = (16*scale)+'px'; }&#10;  dec.addEventListener('click', ()=&gt;{ scale = Math.max(1.0, +(scale - 0.1).toFixed(2)); apply(); });&#10;  inc.addEventListener('click', ()=&gt;{ scale = Math.min(1.8, +(scale + 0.1).toFixed(2)); apply(); });&#10;&#10;  // Dyslexic font toggle&#10;  const dysBtn = document.getElementById('dyslexic');&#10;  if (dysBtn) {&#10;    dysBtn.addEventListener('click', () =&gt; {&#10;      document.body.classList.toggle('dyslexic');&#10;      const enabled = document.body.classList.contains('dyslexic');&#10;      dysBtn.setAttribute('aria-pressed', enabled ? 'true' : 'false');&#10;    });&#10;  }&#10;&#10;  // High contrast toggle&#10;  const contrastBtn = document.getElementById('contrast');&#10;  contrastBtn.addEventListener('click', ()=&gt;{&#10;    const on = document.documentElement.classList.toggle('hc');&#10;    contrastBtn.setAttribute('aria-pressed', on ? 'true' : 'false');&#10;  });&#10;});" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/UI/Payments/payments.css">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/UI/Payments/payments.css" />
              <option name="originalContent" value="/* payments.css */&#10;:root {&#10;  --bg: #54728A;&#10;  --panel: #f6f8fa;&#10;  --ink: #0a0a0a;&#10;  --muted: #5f6b76;&#10;  --primary: #2b66c3;&#10;  --radius: 22px;&#10;  --touch: 56px;&#10;}&#10;body, html {&#10;  height: 100%;&#10;  margin: 0;&#10;  padding: 0;&#10;  font-family: ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, &quot;Helvetica Neue&quot;, Arial, &quot;Noto Sans&quot;, &quot;Liberation Sans&quot;, sans-serif;&#10;  background: var(--bg);&#10;  color: var(--ink);&#10;  display: flex;&#10;  flex-direction: row;&#10;  min-height: 100vh;&#10;}&#10;body {&#10;  min-height: 100vh;&#10;  margin: 0;&#10;  padding: 0;&#10;  font-family: ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, &quot;Helvetica Neue&quot;, Arial, &quot;Noto Sans&quot;, &quot;Liberation Sans&quot;, sans-serif;&#10;  background: var(--bg);&#10;  color: var(--ink);&#10;}&#10;&#10;/* Center the form card when chat is closed */&#10;body:not(.chat-open) .wrap {&#10;  position: absolute;&#10;  left: 0;&#10;  top: 0;&#10;  width: 100vw;&#10;  height: 100vh;&#10;  display: flex;&#10;  justify-content: center;&#10;  align-items: center;&#10;  margin: 0;&#10;  padding: 0;&#10;}&#10;&#10;/* When chat is open, form fills left side */&#10;body.chat-open {&#10;  display: flex;&#10;  flex-direction: row;&#10;}&#10;body.chat-open .wrap {&#10;  position: fixed;&#10;  left: 0;&#10;  top: 0;&#10;  width: 50vw;&#10;  height: 100vh;&#10;  display: block;&#10;  margin: 0;&#10;  padding: 0;&#10;  max-width: none;&#10;}&#10;body.chat-open .card {&#10;  height: 100vh;&#10;  margin: 0;&#10;  border-radius: 0;&#10;  width: 100%;&#10;  box-sizing: border-box;&#10;  display: flex;&#10;  flex-direction: column;&#10;  justify-content: flex-start;&#10;}&#10;body.chat-open .header {&#10;  border-radius: 0;&#10;  margin-bottom: 0;&#10;}&#10;.card {&#10;  background: var(--panel);&#10;  border: 1px solid rgba(0,0,0,.08);&#10;  border-radius: var(--radius);&#10;  box-shadow: 0 1px 0 rgba(0,0,0,.04);&#10;  margin: auto;&#10;}&#10;.header {&#10;  background: #FF5640;&#10;  color: #fff;&#10;  padding: 20px 24px;&#10;  border-radius: var(--radius) var(--radius) 0 0;&#10;  display: flex;&#10;  align-items: center;&#10;  justify-content: space-between;&#10;}&#10;.name {&#10;  font-size: 2rem;&#10;  font-weight: 700;&#10;  letter-spacing: .3px;&#10;}&#10;.panel {&#10;  padding: 20px 16px 24px;&#10;}&#10;h1 {&#10;  font-size: 1.5rem;&#10;  margin: 10px 6px 18px;&#10;}&#10;form {&#10;  width: 100%;&#10;  display: flex;&#10;  flex-direction: column;&#10;  gap: 14px;&#10;  align-items: center;&#10;}&#10;.form-row {&#10;  display: flex;&#10;  flex-direction: row;&#10;  align-items: center;&#10;  gap: 16px;&#10;  width: 100%;&#10;  max-width: 320px;&#10;}&#10;.form-row label {&#10;  font-size: 1.1rem;&#10;  color: #222;&#10;  font-weight: 400;&#10;  min-width: 110px;&#10;}&#10;input[type=&quot;text&quot;] {&#10;  font-size: 1.1rem;&#10;  color: #888;&#10;  background: #f6f6f6;&#10;  border: 1px solid #ccc;&#10;  border-radius: 6px;&#10;  padding: 6px 12px;&#10;  outline: none;&#10;  transition: border 0.2s;&#10;  width: 100%;&#10;  box-sizing: border-box;&#10;  min-width: 160px;&#10;  max-width: 180px;&#10;}&#10;input[type=&quot;text&quot;]:focus {&#10;  border: 1.5px solid #2b66c3;&#10;  color: #222;&#10;}&#10;.btn {&#10;  background: var(--primary);&#10;  color: #fff;&#10;  font-size: 1.15rem;&#10;  font-weight: 500;&#10;  border: none;&#10;  border-radius: 10px;&#10;  padding: 12px 0;&#10;  margin-top: 18px;&#10;  cursor: pointer;&#10;  transition: background 0.2s;&#10;  width: 100%;&#10;  max-width: 320px;&#10;}&#10;.btn:hover {&#10;  background: #1a4a8a;&#10;}&#10;.chat-tab {&#10;  position: fixed;&#10;  top: 50%;&#10;  right: 0;&#10;  transform: translateY(-50%);&#10;  background: #2b66c3;&#10;  color: #fff;&#10;  font-size: 2rem;&#10;  padding: 12px 18px;&#10;  border-radius: 16px 0 0 16px;&#10;  cursor: pointer;&#10;  z-index: 1001;&#10;  box-shadow: 0 2px 8px rgba(0,0,0,0.12);&#10;  transition: background 0.2s;&#10;}&#10;.chat-tab:hover {&#10;  background: #1a4a8a;&#10;}&#10;&#10;.chat-window {&#10;  position: fixed;&#10;  top: 0;&#10;  right: -50vw;&#10;  width: 50vw;&#10;  height: 100vh;&#10;  background: #fff;&#10;  box-shadow: -2px 0 16px rgba(0,0,0,0.12);&#10;  z-index: 1002;&#10;  display: flex;&#10;  flex-direction: column;&#10;  transition: right 0.4s cubic-bezier(.77,0,.18,1);&#10;}&#10;.chat-window.open {&#10;  right: 0;&#10;}&#10;.chat-header {&#10;  background: #2b66c3;&#10;  color: #fff;&#10;  padding: 16px;&#10;  font-size: 1.2rem;&#10;  font-weight: 600;&#10;  border-radius: 0 0 12px 12px;&#10;}&#10;.chat-messages {&#10;  flex: 1;&#10;  padding: 16px;&#10;  overflow-y: auto;&#10;  font-size: 1rem;&#10;  background: #f6f8fa;&#10;}&#10;.chat-form {&#10;  display: flex;&#10;  gap: 8px;&#10;  padding: 12px 16px;&#10;  border-top: 1px solid #eee;&#10;  background: #f6f8fa;&#10;}&#10;.chat-form input[type=&quot;text&quot;] {&#10;  flex: 1;&#10;  font-size: 1rem;&#10;  padding: 8px 12px;&#10;  border-radius: 8px;&#10;  border: 1px solid #ccc;&#10;}&#10;.chat-form button {&#10;  background: #2b66c3;&#10;  color: #fff;&#10;  border: none;&#10;  border-radius: 8px;&#10;  padding: 8px 18px;&#10;  font-size: 1rem;&#10;  cursor: pointer;&#10;  transition: background 0.2s;&#10;}&#10;.chat-form button:hover {&#10;  background: #1a4a8a;&#10;}&#10;" />
              <option name="updatedContent" value="/* payments.css */&#10;:root {&#10;  --bg: #54728A;&#10;  --panel: #f6f8fa;&#10;  --ink: #0a0a0a;&#10;  --muted: #5f6b76;&#10;  --primary: #2b66c3;&#10;  --radius: 22px;&#10;  --touch: 56px;&#10;}&#10;body, html {&#10;  height: 100%;&#10;  margin: 0;&#10;  padding: 0;&#10;  font-family: ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, &quot;Helvetica Neue&quot;, Arial, &quot;Noto Sans&quot;, &quot;Liberation Sans&quot;, sans-serif;&#10;  background: var(--bg);&#10;  color: var(--ink);&#10;  display: flex;&#10;  flex-direction: row;&#10;  min-height: 100vh;&#10;}&#10;body {&#10;  min-height: 100vh;&#10;  margin: 0;&#10;  padding: 0;&#10;  font-family: ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, &quot;Helvetica Neue&quot;, Arial, &quot;Noto Sans&quot;, &quot;Liberation Sans&quot;, sans-serif;&#10;  background: var(--bg);&#10;  color: var(--ink);&#10;}&#10;&#10;/* Center the form card when chat is closed */&#10;body:not(.chat-open) .wrap {&#10;  position: absolute;&#10;  left: 0;&#10;  top: 0;&#10;  width: 100vw;&#10;  height: 100vh;&#10;  display: flex;&#10;  justify-content: center;&#10;  align-items: center;&#10;  margin: 0;&#10;  padding: 0;&#10;}&#10;&#10;/* When chat is open, form fills left side */&#10;body.chat-open {&#10;  display: flex;&#10;  flex-direction: row;&#10;}&#10;body.chat-open .wrap {&#10;  position: fixed;&#10;  left: 0;&#10;  top: 0;&#10;  width: 50vw;&#10;  height: 100vh;&#10;  display: block;&#10;  margin: 0;&#10;  padding: 0;&#10;  max-width: none;&#10;}&#10;body.chat-open .card {&#10;  height: 100vh;&#10;  margin: 0;&#10;  border-radius: 0;&#10;  width: 100%;&#10;  box-sizing: border-box;&#10;  display: flex;&#10;  flex-direction: column;&#10;  justify-content: flex-start;&#10;}&#10;body.chat-open .header {&#10;  border-radius: 0;&#10;  margin-bottom: 0;&#10;}&#10;.card {&#10;  background: var(--panel);&#10;  border: 1px solid rgba(0,0,0,.08);&#10;  border-radius: var(--radius);&#10;  box-shadow: 0 1px 0 rgba(0,0,0,.04);&#10;  margin: auto;&#10;}&#10;.header {&#10;  background: #FF5640;&#10;  color: #fff;&#10;  padding: 20px 24px;&#10;  border-radius: var(--radius) var(--radius) 0 0;&#10;  display: flex;&#10;  align-items: center;&#10;  justify-content: space-between;&#10;}&#10;.name {&#10;  font-size: 2rem;&#10;  font-weight: 700;&#10;  letter-spacing: .3px;&#10;}&#10;.panel {&#10;  padding: 20px 16px 24px;&#10;}&#10;h1 {&#10;  font-size: 1.5rem;&#10;  margin: 10px 6px 18px;&#10;}&#10;form {&#10;  width: 100%;&#10;  display: flex;&#10;  flex-direction: column;&#10;  gap: 14px;&#10;  align-items: center;&#10;}&#10;.form-row {&#10;  display: flex;&#10;  flex-direction: row;&#10;  align-items: center;&#10;  gap: 16px;&#10;  width: 100%;&#10;  max-width: 320px;&#10;}&#10;.form-row label {&#10;  font-size: 1.1rem;&#10;  color: #222;&#10;  font-weight: 400;&#10;  min-width: 110px;&#10;}&#10;input[type=&quot;text&quot;] {&#10;  font-size: 1.1rem;&#10;  color: #888;&#10;  background: #f6f6f6;&#10;  border: 1px solid #ccc;&#10;  border-radius: 6px;&#10;  padding: 6px 12px;&#10;  outline: none;&#10;  transition: border 0.2s;&#10;  width: 100%;&#10;  box-sizing: border-box;&#10;  min-width: 160px;&#10;  max-width: 180px;&#10;}&#10;input[type=&quot;text&quot;]:focus {&#10;  border: 1.5px solid #2b66c3;&#10;  color: #222;&#10;}&#10;.btn {&#10;  background: var(--primary);&#10;  color: #fff;&#10;  font-size: 1.15rem;&#10;  font-weight: 500;&#10;  border: none;&#10;  border-radius: 10px;&#10;  padding: 12px 0;&#10;  margin-top: 18px;&#10;  cursor: pointer;&#10;  transition: background 0.2s;&#10;  width: 100%;&#10;  max-width: 320px;&#10;}&#10;.btn:hover {&#10;  background: #1a4a8a;&#10;}&#10;.chat-tab {&#10;  position: fixed;&#10;  top: 50%;&#10;  right: 0;&#10;  transform: translateY(-50%);&#10;  background: #2b66c3;&#10;  color: #fff;&#10;  font-size: 2rem;&#10;  padding: 12px 18px;&#10;  border-radius: 16px 0 0 16px;&#10;  cursor: pointer;&#10;  z-index: 1001;&#10;  box-shadow: 0 2px 8px rgba(0,0,0,0.12);&#10;  transition: background 0.2s;&#10;}&#10;.chat-tab:hover {&#10;  background: #1a4a8a;&#10;}&#10;&#10;.chat-window {&#10;  position: fixed;&#10;  top: 0;&#10;  right: -50vw;&#10;  width: 50vw;&#10;  height: 100vh;&#10;  background: #fff;&#10;  box-shadow: -2px 0 16px rgba(0,0,0,0.12);&#10;  z-index: 1002;&#10;  display: flex;&#10;  flex-direction: column;&#10;  transition: right 0.4s cubic-bezier(.77,0,.18,1);&#10;}&#10;.chat-window.open {&#10;  right: 0;&#10;}&#10;.chat-header {&#10;  background: #2b66c3;&#10;  color: #fff;&#10;  padding: 16px;&#10;  font-size: 1.2rem;&#10;  font-weight: 600;&#10;  border-radius: 0 0 12px 12px;&#10;}&#10;.chat-messages {&#10;  flex: 1;&#10;  padding: 16px;&#10;  overflow-y: auto;&#10;  font-size: 1rem;&#10;  background: #f6f8fa;&#10;}&#10;.chat-form {&#10;  display: flex;&#10;  gap: 8px;&#10;  padding: 12px 16px;&#10;  border-top: 1px solid #eee;&#10;  background: #f6f8fa;&#10;}&#10;.chat-form input[type=&quot;text&quot;] {&#10;  flex: 1;&#10;  font-size: 1rem;&#10;  padding: 8px 12px;&#10;  border-radius: 8px;&#10;  border: 1px solid #ccc;&#10;}&#10;.chat-form button {&#10;  background: #2b66c3;&#10;  color: #fff;&#10;  border: none;&#10;  border-radius: 8px;&#10;  padding: 8px 18px;&#10;  font-size: 1rem;&#10;  cursor: pointer;&#10;  transition: background 0.2s;&#10;}&#10;.chat-form button:hover {&#10;  background: #1a4a8a;&#10;}&#10;.form-row input[type=&quot;text&quot;] {&#10;  flex: 1;&#10;  min-width: 0;&#10;  max-width: none;&#10;}&#10;.form-row .currency {&#10;  font-size: 1.1rem;&#10;  color: #888;&#10;  margin-left: 8px;&#10;  white-space: nowrap;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/UI/Payments/payments.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/UI/Payments/payments.html" />
              <option name="originalContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;ro&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;Plată factură&lt;/title&gt;&#10;    &lt;link rel=&quot;stylesheet&quot; href=&quot;payments.css&quot;&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;    &lt;div class=&quot;wrap&quot;&gt;&#10;        &lt;div class=&quot;card&quot;&gt;&#10;            &lt;div class=&quot;header&quot;&gt;&#10;                &lt;div class=&quot;name&quot;&gt;Plată factură&lt;/div&gt;&#10;            &lt;/div&gt;&#10;            &lt;div class=&quot;panel&quot;&gt;&#10;                &lt;h1&gt;Completează detaliile plății&lt;/h1&gt;&#10;                &lt;form id=&quot;paymentForm&quot;&gt;&#10;                    &lt;div class=&quot;form-row&quot;&gt;&#10;                        &lt;label for=&quot;receiver&quot;&gt;Destinatar&lt;/label&gt;&#10;                        &lt;input type=&quot;text&quot; id=&quot;receiver&quot; name=&quot;receiver&quot; readonly&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div class=&quot;form-row&quot;&gt;&#10;                        &lt;label for=&quot;amount&quot;&gt;Sumă&lt;/label&gt;&#10;                        &lt;input type=&quot;text&quot; id=&quot;amount&quot; name=&quot;amount&quot; readonly&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div class=&quot;form-row&quot;&gt;&#10;                        &lt;label for=&quot;card&quot;&gt;Număr card&lt;/label&gt;&#10;                        &lt;input type=&quot;text&quot; id=&quot;card&quot; name=&quot;card&quot; placeholder=&quot;XXXX XXXX XXXX XXXX&quot; maxlength=&quot;19&quot; required&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div class=&quot;form-row&quot;&gt;&#10;                        &lt;label for=&quot;exp&quot;&gt;Expirare&lt;/label&gt;&#10;                        &lt;input type=&quot;text&quot; id=&quot;exp&quot; name=&quot;exp&quot; placeholder=&quot;LL/AA&quot; maxlength=&quot;5&quot; required&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div class=&quot;form-row&quot;&gt;&#10;                        &lt;label for=&quot;cvv&quot;&gt;CVV&lt;/label&gt;&#10;                        &lt;input type=&quot;text&quot; id=&quot;cvv&quot; name=&quot;cvv&quot; placeholder=&quot;CVV&quot; maxlength=&quot;4&quot; required&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;button type=&quot;submit&quot; class=&quot;btn primary&quot;&gt;Plătește&lt;/button&gt;&#10;                &lt;/form&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;    &lt;div id=&quot;chat-tab&quot; class=&quot;chat-tab&quot;&gt;&lt;/div&gt;&#10;    &lt;div id=&quot;chat-window&quot; class=&quot;chat-window&quot;&gt;&#10;        &lt;div class=&quot;chat-header&quot;&gt;AI Chat&#10;            &lt;button id=&quot;chat-close&quot; class=&quot;chat-close&quot; aria-label=&quot;Închide chatul&quot;&gt;&amp;times;&lt;/button&gt;&#10;        &lt;/div&gt;&#10;        &lt;div class=&quot;chat-messages&quot; id=&quot;chatMessages&quot;&gt;&lt;/div&gt;&#10;        &lt;form id=&quot;chatForm&quot; class=&quot;chat-form&quot;&gt;&#10;            &lt;input type=&quot;text&quot; id=&quot;chatInput&quot; placeholder=&quot;Scrie un mesaj...&quot; autocomplete=&quot;off&quot; /&gt;&#10;            &lt;button type=&quot;submit&quot;&gt;Trimite&lt;/button&gt;&#10;        &lt;/form&gt;&#10;    &lt;/div&gt;&#10;    &lt;script src=&quot;payments.js&quot;&gt;&lt;/script&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;&#10;" />
              <option name="updatedContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;ro&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;Plată factură&lt;/title&gt;&#10;    &lt;link rel=&quot;stylesheet&quot; href=&quot;payments.css&quot;&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;    &lt;div class=&quot;wrap&quot;&gt;&#10;        &lt;div class=&quot;card&quot;&gt;&#10;            &lt;div class=&quot;header&quot;&gt;&#10;                &lt;div class=&quot;name&quot;&gt;Plată factură&lt;/div&gt;&#10;            &lt;/div&gt;&#10;            &lt;div class=&quot;panel&quot;&gt;&#10;                &lt;h1&gt;Completează detaliile plății&lt;/h1&gt;&#10;                &lt;form id=&quot;paymentForm&quot;&gt;&#10;                    &lt;div class=&quot;form-row&quot;&gt;&#10;                        &lt;label for=&quot;receiver&quot;&gt;Destinatar&lt;/label&gt;&#10;                        &lt;input type=&quot;text&quot; id=&quot;receiver&quot; name=&quot;receiver&quot; readonly&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div class=&quot;form-row&quot;&gt;&#10;                        &lt;label for=&quot;amount&quot;&gt;Sumă&lt;/label&gt;&#10;                        &lt;input type=&quot;text&quot; id=&quot;amount&quot; name=&quot;amount&quot; readonly&gt;&#10;                        &lt;span class=&quot;currency&quot;&gt;RON&lt;/span&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div class=&quot;form-row&quot;&gt;&#10;                        &lt;label for=&quot;card&quot;&gt;Număr card&lt;/label&gt;&#10;                        &lt;input type=&quot;text&quot; id=&quot;card&quot; name=&quot;card&quot; placeholder=&quot;XXXX XXXX XXXX XXXX&quot; maxlength=&quot;19&quot; required pattern=&quot;\d{4} \d{4} \d{4} \d{4}&quot;&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div class=&quot;form-row&quot;&gt;&#10;                        &lt;label for=&quot;exp&quot;&gt;Expirare&lt;/label&gt;&#10;                        &lt;input type=&quot;text&quot; id=&quot;exp&quot; name=&quot;exp&quot; placeholder=&quot;LL/AA&quot; maxlength=&quot;5&quot; required&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div class=&quot;form-row&quot;&gt;&#10;                        &lt;label for=&quot;cvv&quot;&gt;CVV&lt;/label&gt;&#10;                        &lt;input type=&quot;text&quot; id=&quot;cvv&quot; name=&quot;cvv&quot; placeholder=&quot;CVV&quot; maxlength=&quot;4&quot; required&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;button type=&quot;submit&quot; class=&quot;btn primary&quot;&gt;Plătește&lt;/button&gt;&#10;                &lt;/form&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;    &lt;div id=&quot;chat-tab&quot; class=&quot;chat-tab&quot;&gt;&lt;/div&gt;&#10;    &lt;div id=&quot;chat-window&quot; class=&quot;chat-window&quot;&gt;&#10;        &lt;div class=&quot;chat-header&quot;&gt;AI Chat&#10;            &lt;button id=&quot;chat-close&quot; class=&quot;chat-close&quot; aria-label=&quot;Închide chatul&quot;&gt;&amp;times;&lt;/button&gt;&#10;        &lt;/div&gt;&#10;        &lt;div class=&quot;chat-messages&quot; id=&quot;chatMessages&quot;&gt;&lt;/div&gt;&#10;        &lt;form id=&quot;chatForm&quot; class=&quot;chat-form&quot;&gt;&#10;            &lt;input type=&quot;text&quot; id=&quot;chatInput&quot; placeholder=&quot;Scrie un mesaj...&quot; autocomplete=&quot;off&quot; /&gt;&#10;            &lt;button type=&quot;submit&quot;&gt;Trimite&lt;/button&gt;&#10;        &lt;/form&gt;&#10;    &lt;/div&gt;&#10;    &lt;script src=&quot;payments.js&quot;&gt;&lt;/script&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/UI/Payments/payments.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/UI/Payments/payments.js" />
              <option name="originalContent" value="// payments.js&#10;&#10;document.addEventListener('DOMContentLoaded', function () {&#10;    // Chat tab and window logic&#10;    const chatTab = document.getElementById('chat-tab');&#10;    const chatWindow = document.getElementById('chat-window');&#10;    chatTab.addEventListener('click', function () {&#10;        chatWindow.classList.toggle('open');&#10;        document.body.classList.toggle('chat-open', chatWindow.classList.contains('open'));&#10;        if (chatWindow.classList.contains('open')) {&#10;            // Only show welcome if chat is empty&#10;            if (!chatMessages.hasChildNodes()) {&#10;                const welcome = document.createElement('div');&#10;                welcome.textContent = ' Salut! Sunt asistentul AI. Întreabă-mă orice despre completarea formularului de plată.';&#10;                welcome.style.color = '#2b66c3';&#10;                welcome.style.marginBottom = '12px';&#10;                chatMessages.appendChild(welcome);&#10;            }&#10;        }&#10;    });&#10;&#10;    const chatClose = document.getElementById('chat-close');&#10;    chatClose.addEventListener('click', function () {&#10;        chatWindow.classList.remove('open');&#10;        document.body.classList.remove('chat-open');&#10;    });&#10;&#10;    // Simple chat logic (local echo)&#10;    const chatForm = document.getElementById('chatForm');&#10;    const chatInput = document.getElementById('chatInput');&#10;    const chatMessages = document.getElementById('chatMessages');&#10;    chatForm.addEventListener('submit', function (e) {&#10;        e.preventDefault();&#10;        const msg = chatInput.value.trim();&#10;        if (!msg) return;&#10;        // Gather form state&#10;        const form = document.getElementById('paymentForm');&#10;        const formData = {&#10;            receiver: form.receiver.value,&#10;            amount: form.amount.value,&#10;            card: form.card.value,&#10;            exp: form.exp.value,&#10;            cvv: form.cvv.value&#10;        };&#10;        const userMsg = document.createElement('div');&#10;        userMsg.textContent = 'Tu: ' + msg;&#10;        userMsg.style.marginBottom = '8px';&#10;        chatMessages.appendChild(userMsg);&#10;        chatInput.value = '';&#10;        chatMessages.scrollTop = chatMessages.scrollHeight;&#10;        // Send message and form state to backend&#10;        fetch('http://localhost:5000/chat', {&#10;            method: 'POST',&#10;            headers: { 'Content-Type': 'application/json' },&#10;            body: JSON.stringify({ message: msg, form: formData })&#10;        })&#10;        .then(res =&gt; res.json())&#10;        .then(data =&gt; {&#10;            const aiMsg = document.createElement('div');&#10;            aiMsg.textContent = 'AI: ' + (data.reply || 'Eroare răspuns AI');&#10;            aiMsg.style.color = '#2b66c3';&#10;            chatMessages.appendChild(aiMsg);&#10;            chatMessages.scrollTop = chatMessages.scrollHeight;&#10;            // Autofill form fields if slots are present&#10;            if (data.slots) {&#10;                if (data.slots.receiver) form.receiver.value = data.slots.receiver;&#10;                if (data.slots.amount) form.amount.value = data.slots.amount;&#10;                if (data.slots.card) form.card.value = formatCardNumber(data.slots.card);&#10;                if (data.slots.exp) form.exp.value = data.slots.exp;&#10;                if (data.slots.cvv) form.cvv.value = data.slots.cvv;&#10;            }&#10;        })&#10;        .catch(() =&gt; {&#10;            const aiMsg = document.createElement('div');&#10;            aiMsg.textContent = 'AI: Eroare de conectare la server.';&#10;            aiMsg.style.color = 'red';&#10;            chatMessages.appendChild(aiMsg);&#10;            chatMessages.scrollTop = chatMessages.scrollHeight;&#10;        });&#10;    });&#10;&#10;    // Card number formatting: add space after every 4 digits&#10;    const cardInput = document.getElementById('card');&#10;    cardInput.addEventListener('input', function (e) {&#10;        let value = cardInput.value.replace(/\D/g, ''); // Remove non-digits&#10;        value = value.substring(0, 16); // Max 16 digits&#10;        let formatted = value.replace(/(.{4})/g, '$1 ').trim();&#10;        cardInput.value = formatted;&#10;    });&#10;    // Autofill also formats card number&#10;    function formatCardNumber(num) {&#10;        return num.replace(/\D/g, '').replace(/(.{4})/g, '$1 ').trim();&#10;    }&#10;&#10;    // Add microphone button to chat form (for Whisper upload)&#10;    const micBtn = document.createElement('button');&#10;    micBtn.type = 'button';&#10;    micBtn.id = 'micBtn';&#10;    micBtn.innerHTML = '';&#10;    micBtn.title = 'Vorbește';&#10;    micBtn.style.fontSize = '1.3rem';&#10;    micBtn.style.background = 'none';&#10;    micBtn.style.border = 'none';&#10;    micBtn.style.cursor = 'pointer';&#10;    micBtn.style.marginRight = '4px';&#10;    chatForm.insertBefore(micBtn, chatInput);&#10;&#10;    // Microphone button for webm recording (no Recorder.js)&#10;    let mediaRecorder;&#10;    let audioChunks = [];&#10;    micBtn.addEventListener('click', async function () {&#10;        if (!navigator.mediaDevices || !window.MediaRecorder) {&#10;            alert('Microfonul nu este suportat în acest browser.');&#10;            return;&#10;        }&#10;        micBtn.disabled = true;&#10;        micBtn.innerHTML = '...';&#10;        audioChunks = [];&#10;        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });&#10;        mediaRecorder = new MediaRecorder(stream);&#10;        mediaRecorder.start();&#10;        mediaRecorder.ondataavailable = e =&gt; audioChunks.push(e.data);&#10;        mediaRecorder.onstop = async () =&gt; {&#10;            const audioBlob = new Blob(audioChunks, { type: 'audio/webm' });&#10;            const formData = new FormData();&#10;            formData.append('audio', audioBlob, 'speech.webm');&#10;            const res = await fetch('http://localhost:5000/speech', {&#10;                method: 'POST',&#10;                body: formData&#10;            });&#10;            const data = await res.json();&#10;            chatInput.value = data.transcript || '';&#10;            micBtn.disabled = false;&#10;            micBtn.innerHTML = '';&#10;        };&#10;        setTimeout(() =&gt; {&#10;            mediaRecorder.stop();&#10;            stream.getTracks().forEach(track =&gt; track.stop());&#10;        }, 5000); // Record max 5 seconds&#10;    });&#10;});&#10;" />
              <option name="updatedContent" value="// payments.js&#10;&#10;document.addEventListener('DOMContentLoaded', function () {&#10;    // Chat tab and window logic&#10;    const chatTab = document.getElementById('chat-tab');&#10;    const chatWindow = document.getElementById('chat-window');&#10;    chatTab.addEventListener('click', function () {&#10;        chatWindow.classList.toggle('open');&#10;        document.body.classList.toggle('chat-open', chatWindow.classList.contains('open'));&#10;        if (chatWindow.classList.contains('open')) {&#10;            // Only show welcome if chat is empty&#10;            if (!chatMessages.hasChildNodes()) {&#10;                const welcome = document.createElement('div');&#10;                welcome.textContent = ' Salut! Sunt asistentul AI. Întreabă-mă orice despre completarea formularului de plată.';&#10;                welcome.style.color = '#2b66c3';&#10;                welcome.style.marginBottom = '12px';&#10;                chatMessages.appendChild(welcome);&#10;            }&#10;        }&#10;    });&#10;&#10;    const chatClose = document.getElementById('chat-close');&#10;    chatClose.addEventListener('click', function () {&#10;        chatWindow.classList.remove('open');&#10;        document.body.classList.remove('chat-open');&#10;    });&#10;&#10;    // Simple chat logic (local echo)&#10;    const chatForm = document.getElementById('chatForm');&#10;    const chatInput = document.getElementById('chatInput');&#10;    const chatMessages = document.getElementById('chatMessages');&#10;    chatForm.addEventListener('submit', function (e) {&#10;        e.preventDefault();&#10;        const msg = chatInput.value.trim();&#10;        if (!msg) return;&#10;        // Gather form state&#10;        const form = document.getElementById('paymentForm');&#10;        const formData = {&#10;            receiver: form.receiver.value,&#10;            amount: form.amount.value,&#10;            card: form.card.value,&#10;            exp: form.exp.value,&#10;            cvv: form.cvv.value&#10;        };&#10;        const userMsg = document.createElement('div');&#10;        userMsg.textContent = 'Tu: ' + msg;&#10;        userMsg.style.marginBottom = '8px';&#10;        chatMessages.appendChild(userMsg);&#10;        chatInput.value = '';&#10;        chatMessages.scrollTop = chatMessages.scrollHeight;&#10;        // Send message and form state to backend&#10;        fetch('http://localhost:5000/chat', {&#10;            method: 'POST',&#10;            headers: { 'Content-Type': 'application/json' },&#10;            body: JSON.stringify({ message: msg, form: formData })&#10;        })&#10;        .then(res =&gt; res.json())&#10;        .then(data =&gt; {&#10;            const aiMsg = document.createElement('div');&#10;            aiMsg.textContent = 'AI: ' + (data.reply || 'Eroare răspuns AI');&#10;            aiMsg.style.color = '#2b66c3';&#10;            chatMessages.appendChild(aiMsg);&#10;            chatMessages.scrollTop = chatMessages.scrollHeight;&#10;            // Autofill form fields if slots are present&#10;            if (data.slots) {&#10;                if (data.slots.receiver) form.receiver.value = data.slots.receiver;&#10;                if (data.slots.amount) form.amount.value = data.slots.amount;&#10;                if (data.slots.card) form.card.value = formatCardNumber(data.slots.card);&#10;                if (data.slots.exp) form.exp.value = data.slots.exp;&#10;                if (data.slots.cvv) form.cvv.value = data.slots.cvv;&#10;            }&#10;        })&#10;        .catch(() =&gt; {&#10;            const aiMsg = document.createElement('div');&#10;            aiMsg.textContent = 'AI: Eroare de conectare la server.';&#10;            aiMsg.style.color = 'red';&#10;            chatMessages.appendChild(aiMsg);&#10;            chatMessages.scrollTop = chatMessages.scrollHeight;&#10;        });&#10;    });&#10;&#10;    // Card number formatting: add space after every 4 digits&#10;    const cardInput = document.getElementById('card');&#10;    cardInput.addEventListener('input', function (e) {&#10;        let value = cardInput.value.replace(/\D/g, ''); // Remove non-digits&#10;        value = value.substring(0, 16); // Max 16 digits&#10;        let formatted = value.replace(/(.{4})/g, '$1 ').trim();&#10;        cardInput.value = formatted;&#10;    });&#10;    // Autofill also formats card number&#10;    function formatCardNumber(num) {&#10;        return num.replace(/\D/g, '').replace(/(.{4})/g, '$1 ').trim();&#10;    }&#10;&#10;    // Add microphone button to chat form (for Whisper upload)&#10;    const micBtn = document.createElement('button');&#10;    micBtn.type = 'button';&#10;    micBtn.id = 'micBtn';&#10;    micBtn.innerHTML = '';&#10;    micBtn.title = 'Vorbește';&#10;    micBtn.style.fontSize = '1.3rem';&#10;    micBtn.style.background = 'none';&#10;    micBtn.style.border = 'none';&#10;    micBtn.style.cursor = 'pointer';&#10;    micBtn.style.marginRight = '4px';&#10;    chatForm.insertBefore(micBtn, chatInput);&#10;&#10;    // Microphone button for webm recording (no Recorder.js)&#10;    let mediaRecorder;&#10;    let audioChunks = [];&#10;    micBtn.addEventListener('click', async function () {&#10;        if (!navigator.mediaDevices || !window.MediaRecorder) {&#10;            alert('Microfonul nu este suportat în acest browser.');&#10;            return;&#10;        }&#10;        micBtn.disabled = true;&#10;        micBtn.innerHTML = '...';&#10;        audioChunks = [];&#10;        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });&#10;        mediaRecorder = new MediaRecorder(stream);&#10;        mediaRecorder.start();&#10;        mediaRecorder.ondataavailable = e =&gt; audioChunks.push(e.data);&#10;        mediaRecorder.onstop = async () =&gt; {&#10;            const audioBlob = new Blob(audioChunks, { type: 'audio/webm' });&#10;            const formData = new FormData();&#10;            formData.append('audio', audioBlob, 'speech.webm');&#10;            const res = await fetch('http://localhost:5000/speech', {&#10;                method: 'POST',&#10;                body: formData&#10;            });&#10;            const data = await res.json();&#10;            chatInput.value = data.transcript || '';&#10;            micBtn.disabled = false;&#10;            micBtn.innerHTML = '';&#10;            // Automatically send the transcribed text as a chat message&#10;            if (chatInput.value.trim()) {&#10;                chatForm.dispatchEvent(new Event('submit'));&#10;            }&#10;        };&#10;        setTimeout(() =&gt; {&#10;            mediaRecorder.stop();&#10;            stream.getTracks().forEach(track =&gt; track.stop());&#10;        }, 5000); // Record max 5 seconds&#10;    });&#10;});" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/UI/login.css">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/UI/login.css" />
              <option name="originalContent" value="/* login.css */&#10;body, html {&#10;    height: 100%;&#10;    margin: 0;&#10;    padding: 0;&#10;    font-family: Arial, Helvetica, sans-serif;&#10;}&#10;&#10;.login-bg {&#10;    background: #54728A;&#10;    width: 100vw;&#10;    height: 100vh;&#10;    display: flex;&#10;    align-items: center;&#10;    justify-content: center;&#10;}&#10;&#10;.login-container {&#10;    background: #EDEDED;&#10;    border-radius: 24px;&#10;    box-shadow: 0 2px 16px rgba(0,0,0,0.08);&#10;    padding: 32px 40px 24px 40px;&#10;    min-width: 380px;&#10;    display: flex;&#10;    flex-direction: column;&#10;    align-items: center;&#10;}&#10;&#10;.login-logo {&#10;    display: flex;&#10;    align-items: center;&#10;    margin-bottom: 8px;&#10;    margin-top: 4px;&#10;    height: 50px;&#10;}&#10;&#10;.login-title {&#10;    font-size: 2.2rem;&#10;    font-weight: 500;&#10;    color: #222;&#10;    margin-bottom: 18px;&#10;    margin-top: -8px;&#10;    letter-spacing: 1px;&#10;}&#10;&#10;form {&#10;    width: 100%;&#10;    display: flex;&#10;    flex-direction: column;&#10;    gap: 12px;&#10;    align-items: center;&#10;}&#10;&#10;label {&#10;    font-size: 1.2rem;&#10;    color: #222;&#10;    display: flex;&#10;    flex-direction: column;&#10;    align-items: flex-start;&#10;    gap: 4px;&#10;    font-weight: 400;&#10;    width: 100%;&#10;    max-width: 260px;&#10;}&#10;&#10;input[type=&quot;text&quot;] {&#10;    font-size: 1.1rem;&#10;    font-style: italic;&#10;    color: #888;&#10;    background: #f6f6f6;&#10;    border: 1px solid #ccc;&#10;    border-radius: 6px;&#10;    padding: 6px 12px;&#10;    outline: none;&#10;    transition: border 0.2s;&#10;    width: 100%;&#10;    box-sizing: border-box;&#10;    min-width: 180px;&#10;    max-width: 260px;&#10;}&#10;input[type=&quot;text&quot;]:focus {&#10;    border: 1.5px solid #F15A29;&#10;    color: #222;&#10;}&#10;&#10;.login-btn {&#10;    background: #F15A29;&#10;    color: #fff;&#10;    font-size: 1.2rem;&#10;    font-weight: 500;&#10;    border: none;&#10;    border-radius: 10px;&#10;    padding: 10px 0;&#10;    margin-top: 12px;&#10;    cursor: pointer;&#10;    transition: background 0.2s;&#10;}&#10;.login-btn:hover {&#10;    background: #d94c1a;&#10;}&#10;" />
              <option name="updatedContent" value="/* login.css */&#10;body, html {&#10;    height: 100%;&#10;    margin: 0;&#10;    padding: 0;&#10;    font-family: Arial, Helvetica, sans-serif;&#10;}&#10;&#10;.login-bg {&#10;    background: #54728A;&#10;    width: 100vw;&#10;    height: 100vh;&#10;    display: flex;&#10;    align-items: center;&#10;    justify-content: center;&#10;}&#10;&#10;.login-container {&#10;    background: #EDEDED;&#10;    border-radius: 24px;&#10;    box-shadow: 0 2px 16px rgba(0,0,0,0.08);&#10;    padding: 32px 40px 24px 40px;&#10;    min-width: 380px;&#10;    display: flex;&#10;    flex-direction: column;&#10;    align-items: center;&#10;}&#10;&#10;.login-logo {&#10;    display: flex;&#10;    align-items: center;&#10;    margin-bottom: 8px;&#10;    margin-top: 4px;&#10;    height: 50px;&#10;}&#10;&#10;.login-title {&#10;    font-size: 2.2rem;&#10;    font-weight: 500;&#10;    color: #222;&#10;    margin-bottom: 18px;&#10;    margin-top: -8px;&#10;    letter-spacing: 1px;&#10;}&#10;&#10;form {&#10;    width: 100%;&#10;    display: flex;&#10;    flex-direction: column;&#10;    gap: 12px;&#10;    align-items: center;&#10;}&#10;&#10;.form-row {&#10;    display: flex;&#10;    flex-direction: row;&#10;    align-items: center;&#10;    gap: 16px;&#10;    width: 100%;&#10;    max-width: 260px;&#10;    margin-bottom: 8px;&#10;}&#10;&#10;.form-row label {&#10;    font-size: 1.2rem;&#10;    color: #222;&#10;    font-weight: 400;&#10;    min-width: 90px;&#10;    margin-bottom: 0;&#10;}&#10;&#10;input[type=&quot;text&quot;] {&#10;    font-size: 1.1rem;&#10;    font-style: italic;&#10;    color: #888;&#10;    background: #f6f6f6;&#10;    border: 1px solid #ccc;&#10;    border-radius: 6px;&#10;    padding: 6px 12px;&#10;    outline: none;&#10;    transition: border 0.2s;&#10;    width: 100%;&#10;    box-sizing: border-box;&#10;    min-width: 180px;&#10;    max-width: 260px;&#10;}&#10;input[type=&quot;text&quot;]:focus {&#10;    border: 1.5px solid #F15A29;&#10;    color: #222;&#10;}&#10;&#10;.login-btn {&#10;    background: #F15A29;&#10;    color: #fff;&#10;    font-size: 1.2rem;&#10;    font-weight: 500;&#10;    border: none;&#10;    border-radius: 10px;&#10;    padding: 10px 0;&#10;    margin-top: 12px;&#10;    cursor: pointer;&#10;    transition: background 0.2s;&#10;}&#10;.login-btn:hover {&#10;    background: #d94c1a;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/UI/login.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/UI/login.html" />
              <option name="originalContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;ro&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;Autentificare&lt;/title&gt;&#10;    &lt;link rel=&quot;stylesheet&quot; href=&quot;login.css&quot;&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;    &lt;div class=&quot;login-bg&quot;&gt;&#10;        &lt;div class=&quot;login-container&quot;&gt;&#10;            &lt;div class=&quot;login-logo&quot;&gt;&#10;                &lt;img src=&quot;Images/endava_symbol_RGB.svg&quot; alt=&quot;Endava Logo&quot; style=&quot;height:50px;width:auto;&quot;&gt;&#10;            &lt;/div&gt;&#10;            &lt;h1 class=&quot;login-title&quot;&gt;Autentificare&lt;/h1&gt;&#10;            &lt;form id=&quot;loginForm&quot;&gt;&#10;                &lt;label for=&quot;cnp&quot;&gt;CNP &lt;input type=&quot;text&quot; id=&quot;cnp&quot; name=&quot;cnp&quot; placeholder=&quot;CNP&quot; required&gt;&lt;/label&gt;&#10;                &lt;label for=&quot;nume&quot;&gt;Nume &lt;input type=&quot;text&quot; id=&quot;nume&quot; name=&quot;nume&quot; placeholder=&quot;Nume&quot; required&gt;&lt;/label&gt;&#10;                &lt;label for=&quot;prenume&quot;&gt;Prenume &lt;input type=&quot;text&quot; id=&quot;prenume&quot; name=&quot;prenume&quot; placeholder=&quot;Prenume&quot; required&gt;&lt;/label&gt;&#10;                &lt;button type=&quot;submit&quot; class=&quot;login-btn&quot;&gt;Autentifică-te&lt;/button&gt;&#10;            &lt;/form&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;    &lt;script src=&quot;login.js&quot;&gt;&lt;/script&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;&#10;" />
              <option name="updatedContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;ro&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;Autentificare&lt;/title&gt;&#10;    &lt;link rel=&quot;stylesheet&quot; href=&quot;login.css&quot;&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;    &lt;div class=&quot;login-bg&quot;&gt;&#10;        &lt;div class=&quot;login-container&quot;&gt;&#10;            &lt;div class=&quot;login-logo&quot;&gt;&#10;                &lt;img src=&quot;Images/endava_symbol_RGB.svg&quot; alt=&quot;Endava Logo&quot; style=&quot;height:50px;width:auto;&quot;&gt;&#10;            &lt;/div&gt;&#10;            &lt;h1 class=&quot;login-title&quot;&gt;Autentificare&lt;/h1&gt;&#10;            &lt;form id=&quot;loginForm&quot;&gt;&#10;                &lt;div class=&quot;form-row&quot;&gt;&#10;                    &lt;label for=&quot;cnp&quot;&gt;CNP&lt;/label&gt;&#10;                    &lt;input type=&quot;text&quot; id=&quot;cnp&quot; name=&quot;cnp&quot; placeholder=&quot;CNP&quot; required&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;form-row&quot;&gt;&#10;                    &lt;label for=&quot;nume&quot;&gt;Nume&lt;/label&gt;&#10;                    &lt;input type=&quot;text&quot; id=&quot;nume&quot; name=&quot;nume&quot; placeholder=&quot;Nume&quot; required&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;form-row&quot;&gt;&#10;                    &lt;label for=&quot;prenume&quot;&gt;Prenume&lt;/label&gt;&#10;                    &lt;input type=&quot;text&quot; id=&quot;prenume&quot; name=&quot;prenume&quot; placeholder=&quot;Prenume&quot; required&gt;&#10;                &lt;/div&gt;&#10;                &lt;button type=&quot;submit&quot; class=&quot;login-btn&quot;&gt;Autentifică-te&lt;/button&gt;&#10;            &lt;/form&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;    &lt;script src=&quot;login.js&quot;&gt;&lt;/script&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/UI/login.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/UI/login.js" />
              <option name="updatedContent" value="// login.js&#10;&#10;document.addEventListener('DOMContentLoaded', function () {&#10;    const form = document.getElementById('loginForm');&#10;    form.addEventListener('submit', function (e) {&#10;        e.preventDefault();&#10;        const cnp = document.getElementById('cnp').value.trim();&#10;        const nume = document.getElementById('nume').value.trim();&#10;        const prenume = document.getElementById('prenume').value.trim();&#10;&#10;        // Simple validation&#10;        if (!cnp || !nume || !prenume) {&#10;            alert('Te rugăm să completezi toate câmpurile!');&#10;            return;&#10;        }&#10;&#10;        // Example: show the entered data (replace with real authentication logic)&#10;        alert(`CNP: ${cnp}\nNume: ${nume}\nPrenume: ${prenume}`);&#10;&#10;        // You can add AJAX/fetch here to send data to backend&#10;    });&#10;});&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/chatbot.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/chatbot.py" />
              <option name="originalContent" value="import openai&#10;import pyttsx3&#10;from fastapi import FastAPI, Request, File, UploadFile&#10;from fastapi.responses import JSONResponse&#10;from fastapi.middleware.cors import CORSMiddleware&#10;import uvicorn&#10;import re&#10;import tempfile&#10;&#10;app = FastAPI()&#10;&#10;# Allow all origins for development (restrict in production)&#10;app.add_middleware(&#10;    CORSMiddleware,&#10;    allow_origins=[&quot;*&quot;],&#10;    allow_credentials=True,&#10;    allow_methods=[&quot;*&quot;],&#10;    allow_headers=[&quot;*&quot;],&#10;)&#10;&#10;&#10;def extract_slots(message):&#10;    slots = {}&#10;    # Simple regex-based extraction for demo purposes&#10;    # Card number&#10;    card_match = re.search(r'(\d{4}[\s-]?){4}', message)&#10;    if card_match:&#10;        slots['card'] = card_match.group().replace('-', ' ').strip()&#10;    # Expiry&#10;    exp_match = re.search(r'(0[1-9]|1[0-2])[\/\-](\d{2,4})', message)&#10;    if exp_match:&#10;        slots['exp'] = exp_match.group()&#10;    # CVV&#10;    cvv_match = re.search(r'\b\d{3,4}\b', message)&#10;    if cvv_match:&#10;        slots['cvv'] = cvv_match.group()&#10;    # Amount (RON/lei)&#10;    amount_match = re.search(r'(\d+[.,]?\d*)\s*(RON|lei)', message, re.IGNORECASE)&#10;    if amount_match:&#10;        slots['amount'] = amount_match.group(1)&#10;    # Receiver (company names, e.g. Electrica, Digi, E.ON)&#10;    receiver_match = re.search(r'(Electrica|Digi|E\.ON|Enel|Orange|Vodafone)', message, re.IGNORECASE)&#10;    if receiver_match:&#10;        slots['receiver'] = receiver_match.group(1)&#10;    return slots&#10;&#10;&#10;def ask_gpt(prompt, form=None):&#10;    system_message = &quot;You are a helpful assistant for filling out payment forms. If the user provides payment details, extract them and return as slot values (card, exp, cvv, amount, receiver).&quot;&#10;    if form:&#10;        system_message += f&quot; Here is the current payment form state: Receiver: {form.get('receiver', '')}, Amount: {form.get('amount', '')}, Card: {form.get('card', '')}, Expiry: {form.get('exp', '')}, CVV: {form.get('cvv', '')}. Use this information to guide the user and help them complete the form.&quot;&#10;    response = openai.chat.completions.create(&#10;        model=&quot;gpt-4.1-nano&quot;,&#10;        messages=[{&quot;role&quot;: &quot;system&quot;, &quot;content&quot;: system_message},&#10;                  {&quot;role&quot;: &quot;user&quot;, &quot;content&quot;: prompt}]&#10;    )&#10;    reply = response.choices[0].message.content&#10;    slots = extract_slots(prompt)&#10;    return reply, slots&#10;&#10;&#10;def speak(text):&#10;    engine = pyttsx3.init()&#10;    engine.say(text)&#10;    engine.runAndWait()&#10;&#10;@app.post('/chat')&#10;async def chat(request: Request):&#10;    data = await request.json()&#10;    prompt = data.get('message', '')&#10;    form = data.get('form', None)&#10;    if not prompt:&#10;        return JSONResponse({'error': 'No message provided'}, status_code=400)&#10;    try:&#10;        reply, slots = ask_gpt(prompt, form)&#10;        return {'reply': reply, 'slots': slots}&#10;    except Exception as e:&#10;        return JSONResponse({'error': str(e)}, status_code=500)&#10;&#10;@app.post('/speech')&#10;async def speech(audio: UploadFile = File(...)):&#10;    try:&#10;        # Save uploaded audio to a temp file with .wav extension&#10;        with tempfile.NamedTemporaryFile(delete=False, suffix='.wav') as tmp:&#10;            tmp.write(await audio.read())&#10;            tmp.flush()&#10;            tmp.seek(0)&#10;            # Pass .wav file directly to Whisper&#10;            transcript = openai.audio.transcriptions.create(&#10;                model=&quot;whisper-1&quot;,&#10;                file=tmp,&#10;                response_format=&quot;text&quot;&#10;            )&#10;        return {&quot;transcript&quot;: transcript}&#10;    except Exception as e:&#10;        return JSONResponse({'error': str(e)}, status_code=500)&#10;&#10;if __name__ == &quot;__main__&quot;:&#10;    uvicorn.run(&quot;chatbot:app&quot;, host=&quot;0.0.0.0&quot;, port=5000, reload=True)&#10;" />
              <option name="updatedContent" value="import openai&#10;import pyttsx3&#10;from fastapi import FastAPI, Request, File, UploadFile&#10;from fastapi.responses import JSONResponse&#10;from fastapi.middleware.cors import CORSMiddleware&#10;import uvicorn&#10;import re&#10;import tempfile&#10;from pathlib import Path&#10;import mimetypes&#10;from openai import OpenAI&#10;&#10;app = FastAPI()&#10;&#10;# Allow all origins for development (restrict in production)&#10;app.add_middleware(&#10;    CORSMiddleware,&#10;    allow_origins=[&quot;*&quot;],&#10;    allow_credentials=True,&#10;    allow_methods=[&quot;*&quot;],&#10;    allow_headers=[&quot;*&quot;],&#10;)&#10;&#10;&#10;def extract_slots(message):&#10;    slots = {}&#10;    # Simple regex-based extraction for demo purposes&#10;    # Card number&#10;    card_match = re.search(r'(\d{4}[\s-]?){4}', message)&#10;    if card_match:&#10;        slots['card'] = card_match.group().replace('-', ' ').strip()&#10;    # Expiry&#10;    exp_match = re.search(r'(0[1-9]|1[0-2])[\/\-](\d{2,4})', message)&#10;    if exp_match:&#10;        slots['exp'] = exp_match.group()&#10;    # CVV&#10;    cvv_match = re.search(r'\b\d{3,4}\b', message)&#10;    if cvv_match:&#10;        slots['cvv'] = cvv_match.group()&#10;    # Amount (RON/lei)&#10;    amount_match = re.search(r'(\d+[.,]?\d*)\s*(RON|lei)', message, re.IGNORECASE)&#10;    if amount_match:&#10;        slots['amount'] = amount_match.group(1)&#10;    # Receiver (company names, e.g. Electrica, Digi, E.ON)&#10;    receiver_match = re.search(r'(Electrica|Digi|E\.ON|Enel|Orange|Vodafone)', message, re.IGNORECASE)&#10;    if receiver_match:&#10;        slots['receiver'] = receiver_match.group(1)&#10;    return slots&#10;&#10;&#10;def ask_gpt(prompt, form=None):&#10;    system_message = &quot;You are a helpful assistant for filling out payment forms. If the user provides payment details, extract them and return as slot values (card, exp, cvv, amount, receiver).&quot;&#10;    if form:&#10;        system_message += f&quot; Here is the current payment form state: Receiver: {form.get('receiver', '')}, Amount: {form.get('amount', '')}, Card: {form.get('card', '')}, Expiry: {form.get('exp', '')}, CVV: {form.get('cvv', '')}. Use this information to guide the user and help them complete the form.&quot;&#10;    response = openai.chat.completions.create(&#10;        model=&quot;gpt-4.1-nano&quot;,&#10;        messages=[{&quot;role&quot;: &quot;system&quot;, &quot;content&quot;: system_message},&#10;                  {&quot;role&quot;: &quot;user&quot;, &quot;content&quot;: prompt}]&#10;    )&#10;    reply = response.choices[0].message.content&#10;    slots = extract_slots(prompt)&#10;    return reply, slots&#10;&#10;&#10;def speak(text):&#10;    engine = pyttsx3.init()&#10;    engine.say(text)&#10;    engine.runAndWait()&#10;&#10;@app.post('/chat')&#10;async def chat(request: Request):&#10;    data = await request.json()&#10;    prompt = data.get('message', '')&#10;    form = data.get('form', None)&#10;    if not prompt:&#10;        return JSONResponse({'error': 'No message provided'}, status_code=400)&#10;    try:&#10;        reply, slots = ask_gpt(prompt, form)&#10;        return {'reply': reply, 'slots': slots}&#10;    except Exception as e:&#10;        return JSONResponse({'error': str(e)}, status_code=500)&#10;&#10;@app.post('/speech')&#10;async def speech(audio: UploadFile = File(...)):&#10;    try:&#10;        # Save uploaded audio to a temp file with .wav extension&#10;        with tempfile.NamedTemporaryFile(delete=False, suffix='.wav') as tmp:&#10;            tmp.write(await audio.read())&#10;            tmp.flush()&#10;            tmp.seek(0)&#10;            tmp_path = Path(tmp.name)&#10;        # Detect MIME type&#10;        mime, _ = mimetypes.guess_type(str(tmp_path))&#10;        if not mime:&#10;            mime = 'audio/wav'&#10;        # Use OpenAI client for transcription&#10;        client = OpenAI()&#10;        with open(tmp_path, 'rb') as f:&#10;            resp = client.audio.transcriptions.create(&#10;                model='whisper-1',&#10;                file=(tmp_path.name, f, mime),&#10;                response_format='text'&#10;            )&#10;        text = getattr(resp, 'text', None)&#10;        if isinstance(resp, str) and not text:&#10;            text = resp&#10;        return {&quot;transcript&quot;: text.strip() if text else &quot;&quot;}&#10;    except Exception as e:&#10;        import traceback&#10;        print(&quot;Whisper transcription error:&quot;, e)&#10;        traceback.print_exc()&#10;        return JSONResponse({'error': str(e)}, status_code=500)&#10;&#10;if __name__ == &quot;__main__&quot;:&#10;    uvicorn.run(&quot;chatbot:app&quot;, host=&quot;0.0.0.0&quot;, port=5000, reload=True)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/login_screen.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/login_screen.py" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>